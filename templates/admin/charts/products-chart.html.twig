<!DOCTYPE html>
<html lang="en">
  <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Stats</title>
      <script src="https://cdn.jsdelivr.net/npm/chart.js@3.9.1/dist/chart.min.js"></script>
  </head>

  <body>
    <div class="center">
      <canvas id="chartProducts" aria-label="Graphique qui montre la quantité de produits vendus durant chaque mois de l'année en cours" role="img">Your browser does not support the canvas element.</canvas>
    </div>
  
    <div class="center">
      <canvas id="revenueChart" aria-label="Graphique qui montre le chiffre d'affaire de chaque mois" role="img">Your browser does not support the canvas element.</canvas>
    </div>

    <script>
      const ctx1 = document.getElementById('chartProducts').getContext('2d');

      let labels = JSON.parse('{{ labels|json_encode|escape("js") }}'); //le filtre escape() de Twig garantit que les données sont échappées et que 
      // la styntaxe JavaScript reste valide ; 
      let monthlyProductData = JSON.parse('{{ monthlyProductData|json_encode|escape("js") }}');
      //JSON.parse() analyse une chaîne de caractères JSON et construit la valeur JS 


      const salesChart = new Chart(ctx1, {
          type: 'bar',
          data: {
              labels: labels,  // ABCISSE 
              datasets: [{
                  label: 'Quantité totale écoulée (tous produits confondus)',
                  data: monthlyProductData.map(monthData => 
                      Object.values(monthData).reduce((a, b) => a + b, 0) // Total vente par mois
                  ), // .map() permet de créer un tableau à partir d'un tableau existant en appliquant une fonction sur chaque élément du tableau
                    // .reduce() est une méthode qui permet de réduire un tableau à une seule valeur en appliquant une fonction de réduction ; 
                    // ici la méthode reduce prend deux argument (a,b) et la réduction commence à partir de 0 (a = 0)
                    // pour un tableau contenant [30,20,15], on a a=0, b=30 -> a+b=30 ; a=30, b=20 -> a+b=50 ; a=50, b=15 -> a+b=65 ; 
                  backgroundColor: 'rgba(75, 192, 192, 0.2)',
                  borderColor: 'rgba(75, 192, 192, 1)',
                  borderWidth: 1
              }]
          },
          options: {
              responsive: true, //adaptation de la taille du graphique à la taille de la fenêtre ou conteneur parent 
              maintainAspectRatio: false,
              plugins:{
                title: {
                  display:true,
                  text:"Quantité écoulée mensuellement"
                },
                subtitle: {
                  display:true,
                  text: 'Cliquez sur le mois concerné pour voir la quantité totale par produit'
                }
              },
              onClick: function(e) {
                  const activePoints = salesChart.getElementsAtEventForMode(e, 'nearest', { intersect: true }, true);
                  //récupération de l'élément le plus proche où l'utilisateur a été cliqué 

                  if (activePoints.length > 0) {
                      const clickedMonthIndex = activePoints[0].index; // récupération de l'index du mois cliqué 

                      // récupère données du mois cliqué (noms produit + quantité )
                      const monthData = monthlyProductData[clickedMonthIndex];
                      const productNames = Object.keys(monthData);
                      const productQuantities = Object.values(monthData);

                      // mise à jour de l'abcisse (nom produits) et de l'ordonnée (quantité) du graphique
                      salesChart.data.labels = productNames;
                      salesChart.data.datasets = [{
                          label: 'Quantité écoulée par produit au cours du mois sélectionné',
                          data: productQuantities,
                          backgroundColor: 'rgba(75, 192, 192, 0.2)',
                          borderColor: 'rgba(75, 192, 192, 1)',
                          borderWidth: 1
                      }];

                      // Renvoie le graphique mis à jour 
                      salesChart.update();
                  }
                }
          }
      });
      let totalSalesData = JSON.parse('{{ totalSales|json_encode|raw }}');
      const revenueChart = document.getElementById('revenueChart').getContext('2d');
     
      new Chart(revenueChart, {
        type: 'line',
        data: {
          labels: labels,
          datasets: [{
            label: 'CA',
            data: totalSalesData,
            borderWidth: 1,
            backgroundColor: 'rgba(75, 192, 192, 0.2)',
            borderColor:'rgba(75, 192, 192, 1)',
          }]
        },
        options: {
          plugins:{
            title: {
              display:true,
              text:"Chiffre d'affaire mensuel"
            },
          },
          maintainAspectRatio: false,
          responsive:true,
          scales: {
            y: {
              beginAtZero: true
            }
          }
        }
      });

      salesChart.canvas.parentNode.style.height = '300px';
      salesChart.canvas.parentNode.style.width = '600px';

      revenueChart.canvas.parentNode.style.height = '300px';
      revenueChart.canvas.parentNode.style.width = '600px';
  </script>

  <style>
    .center{
      margin: 6rem auto;
    }
  </style>
  </body>
</html>

